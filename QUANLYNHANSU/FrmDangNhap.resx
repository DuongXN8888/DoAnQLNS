<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAAACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAB
        AAAAAAAAb21vAExLTADMy8wAiIKEAKyXmADSvLwAhn19AKqkpACVkZEAv76+ALOysgCcm5sA0J6cANKm
        pQDaop8AvpmXAKOLigDNqqcAmIeEAMe9ugC+t7QAs6unALawrQCcmpkA0c/OAJ6bmQChnpwAfXdyAJ+Z
        lADl4NwA4dzYANjIuQDrw5oAaWZjAIuIhQDb19MA8e3pAJWUkwCvrq0A3L2cAKuVfgDtz7AAt6OOAKWb
        jgCXlpQAb29tAFZWVQDn5+YAnZ2cAJv//wDV//8A8///ADEyMgA5OjoA+Pn5APHy8gCjpKQAlfv/AKH9
        /wDL/f8Akvn/AIzt8wCP9/4Aj9HWALz5/wCLuL0Ahu3/AJft+wB64fYAoe//AH3l/wBnyuUAacHZAIPl
        /gBw3P8AcNb1AHbd/wBqvNcARqfKAHDY/wB02f8AeN3/AG2swQC26/4Att/tAOn4/QA4lroASazVAF/C
        6ABq0/0Aa8vxAJDU7gA3c40AZsz5AHXT+wB+1fsAH1x6AFO67wBfyfsAY8z+AFeiyQBHhqUASV5oAGqF
        kgASXooASq/pAEyu5QBWvPUAXcP8AEeTvQAhQlQAUpO4ABN5ugAcgsIAH2ONADib2ABHsvUATLb3AFO9
        /wBawP8AYcP/AEhmeABTcIIAb3yEACOJzgAoeK0AJm+gADWNygBDpusASbX/ACdhhwBMsfgATrT7AFC2
        +gBSuf8AVbv/AFe8/wBTqucAYrTtAGvE/wBGf6cAeMr/AHqz2ABgdoUAYG12ABV7xwAlidYAInWyADOY
        5QA5oO4ALHq0AD6l8gBCqPIAMXetACdeiABLsf8ATbP/AE+1/wBNksYAKUxnADthfgBhncsAXIeoAJzU
        /QA5pP8ARKr/AEet/wApY5IAQGSBAIXJ/wArP08Aa5W3AFlsewDE5P0AGIbnACGO7AAuk+4AMJbwADae
        /wA1m/cAOZ/+ADqi/wA8ov4AOp70AD+l/wBDqP8AW7D/AHi7+QCJsdQAMjk/AC6X/gAymv4ANJr/AHWw
        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
        AD/gAAAf8AAB3/wA5///h///
</value>
  </data>
</root>